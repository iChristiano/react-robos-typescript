{"version":3,"sources":["components/Card.tsx","components/CardList.tsx","components/SearchBox.tsx","components/Scroll.tsx","containers/App.tsx","registerServiceWorker.ts","index.tsx"],"names":["components_Card","_a","name","email","id","react","className","alt","src","concat","components_CardList","robots","map","robot","i","key","components_SearchBox","searchChange","type","placeholder","onChange","components_Scroll","props","style","overflow","border","height","children","src_containers_App","_super","App","_this","call","this","onSearchChange","event","setState","searchfield","currentTarget","value","state","__extends","prototype","componentDidMount","fetch","then","response","json","users","render","filteredRobots","filter","toLowerCase","includes","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","react_dom","document","getElementById","URL","toString","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yIAeeA,EAZ+B,SAACC,OAAEC,EAAID,EAAAC,KAAEC,EAAKF,EAAAE,MAAEC,EAAEH,EAAAG,GAC9D,OACEC,EAAA,qBAAKC,UAAU,uDACbD,EAAA,qBAAKE,IAAI,SAASC,IAAK,wBAAAC,OAAwBL,EAAE,cACjDC,EAAA,yBACEA,EAAA,wBAAKH,GACLG,EAAA,uBAAIF,MCkBGO,EAnByC,SAACT,OAAEU,EAAMV,EAAAU,OAC/D,OACEN,EAAA,yBAEIM,EAAOC,IAAI,SAACC,EAAcC,GACxB,OACET,EAAA,cAACL,EAAI,CACHe,IAAKD,EACLV,GAAIS,EAAMT,GACVF,KAAMW,EAAMX,KACZC,MAAOU,EAAMV,YCEZa,EAbwC,SAACf,OAAEgB,EAAYhB,EAAAgB,aACpE,OACEZ,EAAA,qBAAKC,UAAU,OACbD,EAAA,uBACEC,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCAHI,EARA,SAACC,GACd,OACEjB,EAAA,qBAAKkB,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,mdCiDEC,EAtCf,SAAAC,GACE,SAAAC,EAAYR,GAAZ,IAAAS,EACEF,EAAAG,KAAAC,KAAMX,IAAMW,YAadF,EAAAG,eAAiB,SAACC,GAChBJ,EAAKK,SAAS,CAAEC,YAAaF,EAAMG,cAAcC,SAbjDR,EAAKS,MAAQ,CACX7B,OAAQ,GACR0B,YAAa,MA+BnB,OApCkBI,EAAAX,EAAAD,GAShBC,EAAAY,UAAAC,kBAAA,eAAAZ,EAAAE,KACEW,MAAM,8CACHC,KAAK,SAAAC,GAAW,OAAAA,EAASC,SACzBF,KAAK,SAAAG,GAAUjB,EAAKK,SAAS,CAAEzB,OAAQqC,OAO5ClB,EAAAY,UAAAO,OAAA,WACQ,IAAAhD,EAA0BgC,KAAKO,MAA7B7B,EAAMV,EAAAU,OAAE0B,EAAWpC,EAAAoC,YACrBa,EAAiBvC,EAAOwC,OAAO,SAAAtC,GACnC,OAAOA,EAAMX,KAAKkD,cAAcC,SAAShB,EAAYe,iBAEvD,OAAQzC,EAAO2C,OAGXjD,EAAA,qBAAKC,UAAU,MACbD,EAAA,oBAAIC,UAAU,MAAI,YAClBD,EAAA,cAACW,EAAS,CAACC,aAAcgB,KAAKC,iBAC9B7B,EAAA,cAACgB,EAAM,KACLhB,EAAA,cAACK,EAAQ,CAACC,OAAQuC,MANxB7C,EAAA,oCAWNyB,EApCA,CAAkBzB,EAAA,WCTZkD,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAgCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTjB,KAAK,SAAAqB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WAClCD,IACFA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5B,QACfuB,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAOvBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,iBCpEjEC,EAAA,OACEvE,EAAA,cAACuB,EAAG,MACJiD,SAASC,eAAe,SDWX,WACb,GAA6C,kBAAmBf,UAAW,CAMzE,GAJkB,IAAIgB,IACpB,0BACAtB,OAAOC,SAASsB,YAEJC,SAAWxB,OAAOC,SAASuB,OAIvC,OAGFxB,OAAOyB,iBAAiB,OAAQ,WAC9B,IAAMpB,EAAQ,GAAArD,OAAG,0BAAsB,sBAElC8C,EA0CX,SAAiCO,GAE/BlB,MAAMkB,GACHjB,KAAK,SAAAC,GAGkB,MAApBA,EAASqC,SACwD,IAAjErC,EAASsC,QAAQC,IAAI,gBAAiBC,QAAQ,cAG9CvB,UAAUC,cAAcuB,MAAM1C,KAAK,SAAAqB,GACjCA,EAAasB,aAAa3C,KAAK,WAC7BY,OAAOC,SAAS+B,aAKpB5B,EAAgBC,KAGnBY,MAAM,WACLF,QAAQC,IACN,mEA3DAiB,CAAwB5B,GAHxBD,EAAgBC,MC5BxBG","file":"static/js/main.15450cd0.chunk.js","sourcesContent":["import * as React from 'react';\nimport { IRobot } from '../containers/App';\n\nconst Card: React.FunctionComponent<IRobot> = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;","import * as React from 'react';\nimport Card from './Card';\nimport { IRobot } from '../containers/App';\n\ninterface IRobotsArray {\n  robots: Array<IRobot>;\n}\n\nconst CardList: React.FunctionComponent<IRobotsArray> = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((robot:IRobot, i:number) => {\n          return (\n            <Card\n              key={i}\n              id={robot.id}\n              name={robot.name}\n              email={robot.email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import * as React from 'react';\n\ninterface ISearchBox {\n  searchChange(event: React.SyntheticEvent<HTMLInputElement>):void\n}\n\n// const SearchBox = ({ searchChange }: ISearchBox) => {}\nconst SearchBox: React.FunctionComponent<ISearchBox> = ({ searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;","import * as React from 'react';\n\ntype IScrollProps = {\n  children?: JSX.Element\n}\n\nconst Scroll = (props:IScrollProps) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import * as React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nexport interface IRobot {\n  name: string;\n  id: number;\n  email: string;\n}\n\ninterface IAppProps {\n}\n\ninterface IAppState {\n  robots: Array<IRobot>;\n  searchfield: string;\n}\n\nclass App extends React.Component<IAppProps, IAppState> {\n  constructor(props:IAppProps) {\n    super(props)\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount():void {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(users => {this.setState({ robots: users})});\n  }\n\n  onSearchChange = (event:React.SyntheticEvent<HTMLInputElement>):void => {\n    this.setState({ searchfield: event.currentTarget.value })\n  }\n\n  render():JSX.Element {\n    const { robots, searchfield } = this.state;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n    return !robots.length ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>Robos TS</h1>\n          <SearchBox searchChange={this.onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default App;","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport './index.css';\nimport 'tachyons';\n\n\nReactDOM.render( \n  <App />,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n"],"sourceRoot":""}